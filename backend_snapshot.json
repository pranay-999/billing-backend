{
  "type": "backend",
  "generated_at": "2025-10-21T16:36:23.970666Z",
  "git_commit": "fbc706cb7ca892aa8e70dd92d8b7f6342249f1be",
  "dependencies": [
    "flask",
    "flask-cors",
    "gunicorn"
  ],
  "routes": [
    {
      "file": "app.py",
      "route": "/"
    },
    {
      "file": "app.py",
      "route": "/get_stock/<design_name>"
    },
    {
      "file": "app.py",
      "route": "/add_sale"
    },
    {
      "file": "app.py",
      "route": "/get_sales"
    },
    {
      "file": "app.py",
      "route": "/update_sale/<int:bill_id>"
    },
    {
      "file": "app.py",
      "route": "/delete_sale/<int:bill_id>"
    },
    {
      "file": "app.py",
      "route": "/dashboard_data"
    },
    {
      "file": "app.py",
      "route": "/get_all_stock"
    },
    {
      "file": "app.py",
      "route": "/add_stock"
    },
    {
      "file": "app.py",
      "route": "/update_stock/<int:stock_id>"
    },
    {
      "file": "app.py",
      "route": "/sync_stock"
    }
  ],
  "files": {
    "requirements.txt": {
      "content": "flask\nflask-cors\ngunicorn\n",
      "sha256": "670055945e3430080880b27eba7aa58aae69c53a2b8ce8ca09b7b0cf5193e269",
      "size": 26
    },
    "insert_stock.py": {
      "content": "import sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('inventory.db')\ncursor = conn.cursor()\n\n# Sample stock entries\nitems = [\n    (\"Galaxy White\", \"Tile\", \"2x2\", 100, 45.0),\n    (\"Aqua Blue\", \"Sanitary\", \"Medium\", 50, 120.0),\n    (\"Marble Gloss\", \"Tile\", \"1x1\", 80, 65.0)\n]\n\nfor item in items:\n    cursor.execute(\"\"\"\n        INSERT OR IGNORE INTO stock (design_name, type, size, stock, unit_price)\n        VALUES (?, ?, ?, ?, ?)\n    \"\"\", item)\n\nconn.commit()\nconn.close()\n\nprint(\"\u2705 Stock items inserted successfully!\")\n",
      "sha256": "929d974c76f7c7118437d931ca67108a85b78e4e90313e41878ab4bd19430bf9",
      "size": 531
    },
    "setup_database.py": {
      "content": "import sqlite3\n\n# Connect to (or create) the database file\nconn = sqlite3.connect('inventory.db')\ncursor = conn.cursor()\n\n# Create table for products (tiles, sanitary, etc.)\ncursor.execute('''\nCREATE TABLE IF NOT EXISTS stock (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    design_name TEXT UNIQUE,\n    type TEXT,\n    size TEXT,\n    stock INTEGER,\n    unit_price REAL\n)\n''')\n\n# Create table for sales\ncursor.execute('''\nCREATE TABLE IF NOT EXISTS sales (\n    bill_id INTEGER PRIMARY KEY AUTOINCREMENT,\n    design_name TEXT,\n    type TEXT,\n    size TEXT,\n    boxes_sold INTEGER,\n    unit_price REAL,\n    amount REAL,\n    gst_type TEXT,\n    cgst REAL,\n    sgst REAL,\n    final_amount REAL,\n    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n)\n''')\n\nconn.commit()\nconn.close()\n\nprint(\"\u2705 Database and tables created successfully!\")\n",
      "sha256": "ac3fafa8a1352f440c5d7fadd8d101b3d3090994a428d5d918f4e7c40d8d5576",
      "size": 822
    },
    "snapshot_generator_backend.py": {
      "content": "#!/usr/bin/env python3\n\"\"\"\nsnapshot_generator_backend.py\n--------------------------------\nGenerates backend snapshot with routes + dependencies.\n\"\"\"\nimport os, re, json, hashlib, zipfile, subprocess\nfrom datetime import datetime\nfrom pathlib import Path\n\nOUTPUT_JSON = \"backend_snapshot.json\"\nOUTPUT_ZIP = \"backend_snapshot.zip\"\nHISTORY_FILE = \"snapshot_history.json\"\nHISTORY_LIMIT = 5\nINCLUDE_EXTS = {\".py\", \".txt\", \".sql\", \".json\", \".md\"}\nEXCLUDE_DIRS = {\".git\", \".venv\", \"__pycache__\", \"migrations\"}\n\ndef sha256(d): return hashlib.sha256(d).hexdigest()\ndef is_excluded(p): return any(part in EXCLUDE_DIRS for part in p.parts)\n\ndef collect_files(base=\".\"):\n    base = Path(base)\n    out = {}\n    for path in base.rglob(\"*\"):\n        if path.is_file() and not is_excluded(path) and path.suffix in INCLUDE_EXTS:\n            text = path.read_text(encoding=\"utf-8\", errors=\"ignore\")\n            out[str(path.relative_to(base))] = {\n                \"content\": text[:200000],\n                \"sha256\": sha256(text.encode()),\n                \"size\": len(text),\n            }\n    return out\n\ndef extract_flask_routes(files):\n    routes = []\n    pattern = re.compile(r\"@(?:app|bp)\\.route\\(['\\\"](.*?)['\\\"]\")\n    for name, data in files.items():\n        if name.endswith(\".py\"):\n            for r in pattern.findall(data[\"content\"]):\n                routes.append({\"file\": name, \"route\": r})\n    return routes\n\ndef get_git_commit():\n    try: return subprocess.check_output([\"git\",\"rev-parse\",\"HEAD\"]).decode().strip()\n    except: return \"unknown\"\n\ndef get_dependencies():\n    req = Path(\"requirements.txt\")\n    if req.exists():\n        return [l.strip() for l in req.read_text().splitlines() if l.strip() and not l.startswith(\"#\")]\n    return []\n\ndef make_zip(snapshot):\n    with zipfile.ZipFile(OUTPUT_ZIP,\"w\",zipfile.ZIP_DEFLATED) as z:\n        for path, data in snapshot[\"files\"].items():\n            z.writestr(path, data.get(\"content\",\"\"))\n    print(f\"\ud83d\udddc Created {OUTPUT_ZIP}\")\n\ndef update_history(meta):\n    hist = []\n    if Path(HISTORY_FILE).exists():\n        try: hist = json.loads(Path(HISTORY_FILE).read_text())\n        except: pass\n    hist.insert(0, meta)\n    hist = hist[:HISTORY_LIMIT]\n    Path(HISTORY_FILE).write_text(json.dumps(hist, indent=2))\n\ndef main():\n    files = collect_files()\n    snapshot = {\n        \"type\": \"backend\",\n        \"generated_at\": datetime.utcnow().isoformat()+\"Z\",\n        \"git_commit\": get_git_commit(),\n        \"dependencies\": get_dependencies(),\n        \"routes\": extract_flask_routes(files),\n        \"files\": files,\n        \"meta\": {\"total_files\": len(files)}\n    }\n    Path(OUTPUT_JSON).write_text(json.dumps(snapshot, indent=2))\n    make_zip(snapshot)\n    update_history({\"timestamp\": snapshot[\"generated_at\"], \"commit\": snapshot[\"git_commit\"], \"total_files\": len(files)})\n    print(f\"\u2705 Snapshot ready: {OUTPUT_JSON}\")\n\nif __name__ == \"__main__\":\n    main()\n",
      "sha256": "18cd77a26b5e79813f7132498ce950c8a027f543007eaa29d4baed0f3d38fa56",
      "size": 2896
    },
    "app.py": {
      "content": "from flask import Flask, jsonify, request\nfrom flask_cors import CORS\nimport sqlite3\n\napp = Flask(__name__)\nCORS(app)\n\nDB_NAME = \"inventory.db\"\n\n# ---------------------------\n# Helper Function\n# ---------------------------\ndef query_db(query, args=(), one=False):\n    conn = sqlite3.connect(DB_NAME)\n    cursor = conn.cursor()\n    cursor.execute(query, args)\n    data = cursor.fetchall()\n    conn.commit()\n    conn.close()\n    return (data[0] if data else None) if one else data\n\n# ---------------------------\n# Routes\n# ---------------------------\n@app.route('/')\ndef home():\n    return jsonify({\"message\": \"Billing backend ready!\"})\n\n# Fetch stock by design name\n@app.route('/get_stock/<design_name>', methods=['GET'])\ndef get_stock(design_name):\n    result = query_db(\"SELECT * FROM stock WHERE design_name = ?\", (design_name,), one=True)\n    if result:\n        return jsonify({\n            \"design_name\": result[1],\n            \"type\": result[2],\n            \"size\": result[3],\n            \"stock\": result[4],\n            \"unit_price\": result[5]\n        })\n    return jsonify({\"error\": \"Design not found\"}), 404\n\n# Add a sale entry with GST logic\n@app.route('/add_sale', methods=['POST'])\ndef add_sale():\n    try:\n        data = request.get_json()\n        if not data:\n            return jsonify({\"error\": \"No JSON received\"}), 400\n\n        design_name = data.get('design_name')\n        boxes_sold = data.get('boxes_sold')\n        unit_price = data.get('unit_price')\n        gst_mode = data.get('gst_mode')\n\n        if not design_name or not unit_price or not boxes_sold:\n            return jsonify({\"error\": \"Missing required fields\"}), 400\n\n        base_amount = float(unit_price) * int(boxes_sold)\n\n        if gst_mode == \"exclusive\":\n            cgst = base_amount * 0.09\n            sgst = base_amount * 0.09\n            final_amount = base_amount + cgst + sgst\n        elif gst_mode == \"inclusive\":\n            base = base_amount / 1.18\n            cgst = base * 0.09\n            sgst = base * 0.09\n            final_amount = base_amount\n        else:\n            cgst = sgst = 0\n            final_amount = base_amount\n\n        conn = sqlite3.connect(DB_NAME)\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            INSERT INTO sales (design_name, type, size, boxes_sold, unit_price, amount, gst_type, cgst, sgst, final_amount)\n            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n        \"\"\", (\n            design_name, data.get('type'), data.get('size'),\n            boxes_sold, unit_price, base_amount, gst_mode,\n            cgst, sgst, final_amount\n        ))\n        conn.commit()\n        conn.close()\n\n        return jsonify({\"message\": \"Sale added successfully!\", \"final_amount\": final_amount})\n    except Exception as e:\n        print(\"Error in /add_sale:\", str(e))\n        return jsonify({\"error\": str(e)}), 500\n\n\n# Get all sales\n@app.route('/get_sales', methods=['GET'])\ndef get_sales():\n    result = query_db(\"SELECT * FROM sales ORDER BY date DESC\")\n    return jsonify(result)\n\n# --- Initialize Database with Sample Stock if Empty ---\ndef initialize_stock():\n    conn = sqlite3.connect(DB_NAME)\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT COUNT(*) FROM stock\")\n    count = cursor.fetchone()[0]\n    if count == 0:\n        print(\"Inserting default stock data...\")\n        items = [\n            (\"Galaxy White\", \"Tile\", \"2x2\", 100, 45.0),\n            (\"Aqua Blue\", \"Sanitary\", \"Medium\", 50, 120.0),\n            (\"Marble Gloss\", \"Tile\", \"1x1\", 80, 65.0)\n        ]\n        cursor.executemany(\n            \"INSERT INTO stock (design_name, type, size, stock, unit_price) VALUES (?, ?, ?, ?, ?)\",\n            items\n        )\n        conn.commit()\n    conn.close()\n\n# call function when app starts\ninitialize_stock()\n\n# ---------------------------\n# Update Sale\n# ---------------------------\n@app.route('/update_sale/<int:bill_id>', methods=['PUT'])\ndef update_sale(bill_id):\n    try:\n        data = request.get_json()\n        conn = sqlite3.connect(DB_NAME)\n        cursor = conn.cursor()\n\n        design_name = data.get(\"design_name\")\n        type_ = data.get(\"type\")\n        size = data.get(\"size\")\n        boxes_sold = int(data.get(\"boxes_sold\"))\n        unit_price = float(data.get(\"unit_price\"))\n        gst_mode = data.get(\"gst_mode\", \"exclusive\")\n\n        base_amount = unit_price * boxes_sold\n\n        if gst_mode == \"exclusive\":\n            cgst = base_amount * 0.09\n            sgst = base_amount * 0.09\n            final_amount = base_amount + cgst + sgst\n        elif gst_mode == \"inclusive\":\n            base = base_amount / 1.18\n            cgst = base * 0.09\n            sgst = base * 0.09\n            final_amount = base_amount\n        else:\n            cgst = sgst = 0\n            final_amount = base_amount\n\n        cursor.execute(\n            \"\"\"\n            UPDATE sales \n            SET design_name=?, type=?, size=?, boxes_sold=?, unit_price=?, amount=?, gst_type=?, cgst=?, sgst=?, final_amount=? \n            WHERE bill_id=?\n            \"\"\",\n            (design_name, type_, size, boxes_sold, unit_price, base_amount, gst_mode, cgst, sgst, final_amount, bill_id)\n        )\n        conn.commit()\n        conn.close()\n\n        return jsonify({\"message\": \"Sale updated successfully!\"})\n    except Exception as e:\n        print(\"Error updating sale:\", str(e))\n        return jsonify({\"error\": str(e)}), 500\n\n\n# ---------------------------\n# Delete Sale\n# ---------------------------\n@app.route('/delete_sale/<int:bill_id>', methods=['DELETE'])\ndef delete_sale(bill_id):\n    try:\n        conn = sqlite3.connect(DB_NAME)\n        cursor = conn.cursor()\n        cursor.execute(\"DELETE FROM sales WHERE bill_id=?\", (bill_id,))\n        conn.commit()\n        conn.close()\n        return jsonify({\"message\": \"Sale deleted successfully!\"})\n    except Exception as e:\n        print(\"Error deleting sale:\", str(e))\n        return jsonify({\"error\": str(e)}), 500\n\n# ---------------------------\n# Dashboard Data\n# ---------------------------\n@app.route('/dashboard_data', methods=['GET'])\ndef dashboard_data():\n    try:\n        conn = sqlite3.connect(DB_NAME)\n        cursor = conn.cursor()\n\n        # Total Sales Amount\n        cursor.execute(\"SELECT SUM(final_amount) FROM sales\")\n        total_sales = cursor.fetchone()[0] or 0\n\n        # Total GST (CGST + SGST)\n        cursor.execute(\"SELECT SUM(cgst + sgst) FROM sales\")\n        total_gst = cursor.fetchone()[0] or 0\n\n        # Number of Bills\n        cursor.execute(\"SELECT COUNT(*) FROM sales\")\n        total_bills = cursor.fetchone()[0] or 0\n\n        # Top Selling Products\n        cursor.execute(\"\"\"\n            SELECT design_name, SUM(boxes_sold) as total_qty\n            FROM sales\n            GROUP BY design_name\n            ORDER BY total_qty DESC\n            LIMIT 5\n        \"\"\")\n        top_products = cursor.fetchall()\n\n        conn.close()\n\n        return jsonify({\n            \"total_sales\": total_sales,\n            \"total_gst\": total_gst,\n            \"total_bills\": total_bills,\n            \"top_products\": [{\"design\": t[0], \"qty\": t[1]} for t in top_products]\n        })\n    except Exception as e:\n        print(\"Error in /dashboard_data:\", str(e))\n        return jsonify({\"error\": str(e)}), 500\n        # ---------------------------\n# Get All Stock\n# ---------------------------\n@app.route('/get_all_stock', methods=['GET'])\ndef get_all_stock():\n    try:\n        conn = sqlite3.connect(DB_NAME)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT * FROM stock ORDER BY design_name ASC\")\n        rows = cursor.fetchall()\n        conn.close()\n        return jsonify(rows)\n    except Exception as e:\n        print(\"Error in /get_all_stock:\", str(e))\n        return jsonify({\"error\": str(e)}), 500\n\n\n# ---------------------------\n# Add Stock Item\n# ---------------------------\n# ---------------------------\n# Add or Update Stock Item\n# ---------------------------\n@app.route('/add_stock', methods=['POST'])\ndef add_stock():\n    try:\n        data = request.get_json()\n        conn = sqlite3.connect(DB_NAME)\n        cursor = conn.cursor()\n\n        # Check if design already exists\n        cursor.execute(\"SELECT * FROM stock WHERE design_name=?\", (data['design_name'],))\n        existing = cursor.fetchone()\n\n        if existing:\n            # Update existing stock item\n            cursor.execute(\"\"\"\n                UPDATE stock\n                SET type=?, size=?, stock=?, unit_price=?\n                WHERE design_name=?\n            \"\"\", (data['type'], data['size'], data['stock'], data['unit_price'], data['design_name']))\n            message = f\"Updated existing stock: {data['design_name']}\"\n        else:\n            # Insert new stock item\n            cursor.execute(\"\"\"\n                INSERT INTO stock (design_name, type, size, stock, unit_price)\n                VALUES (?, ?, ?, ?, ?)\n            \"\"\", (data['design_name'], data['type'], data['size'], data['stock'], data['unit_price']))\n            message = f\"Added new stock: {data['design_name']}\"\n\n        conn.commit()\n        conn.close()\n        return jsonify({\"message\": message})\n    except Exception as e:\n        print(\"Error in /add_stock:\", str(e))\n        return jsonify({\"error\": str(e)}), 500\n\n# ---------------------------\n# Update Stock\n# ---------------------------\n@app.route('/update_stock/<int:stock_id>', methods=['PUT'])\ndef update_stock(stock_id):\n    try:\n        data = request.get_json()\n        conn = sqlite3.connect(DB_NAME)\n        cursor = conn.cursor()\n        cursor.execute(\n            \"UPDATE stock SET design_name=?, type=?, size=?, stock=?, unit_price=? WHERE id=?\",\n            (data['design_name'], data['type'], data['size'], data['stock'], data['unit_price'], stock_id)\n        )\n        conn.commit()\n        conn.close()\n        return jsonify({\"message\": \"Stock updated successfully!\"})\n    except Exception as e:\n        print(\"Error in /update_stock:\", str(e))\n        return jsonify({\"error\": str(e)}), 500\n\n# ---------------------------\n# Sync Sales Data to Stock Table\n# ---------------------------\n@app.route('/sync_stock', methods=['GET'])\ndef sync_stock():\n    try:\n        conn = sqlite3.connect(DB_NAME)\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT DISTINCT design_name, type, size, unit_price FROM sales\")\n        sales_data = cursor.fetchall()\n\n        added = 0\n        for s in sales_data:\n            cursor.execute(\"SELECT * FROM stock WHERE design_name=?\", (s[0],))\n            if not cursor.fetchone():\n                cursor.execute(\n                    \"INSERT INTO stock (design_name, type, size, stock, unit_price) VALUES (?, ?, ?, ?, ?)\",\n                    (s[0], s[1], s[2], 0, s[3])\n                )\n                added += 1\n        conn.commit()\n        conn.close()\n        return jsonify({\"message\": f\"Stock synced successfully! Added {added} new items.\"})\n    except Exception as e:\n        print(\"Error syncing stock:\", str(e))\n        return jsonify({\"error\": str(e)}), 500\n\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n",
      "sha256": "948b63f9f58197b09ae46bfba3042380a5f66a504f61b2cb69ec6eb211ce1796",
      "size": 11028
    }
  },
  "meta": {
    "total_files": 5
  }
}